// Code generated by apic. DO NOT EDIT.

package event_sources

import (
	"bytes"
	"context"
	"net/url"
	"text/template"

	"github.com/ngrok/ngrok-api-go"
)

type Client struct {
	apiClient *ngrok.Client
}

func NewClient(apiClient *ngrok.Client) *Client {
	return &Client{apiClient: apiClient}
}

// TODO
func (c *Client) Create(
	ctx context.Context,
	arg *ngrok.EventSourceCreate,
) (*ngrok.EventSource, error) {
	var res ngrok.EventSource
	var path bytes.Buffer
	if err := template.Must(template.New("create_path").Parse("/event_subscriptions/{{ .SubscriptionID }}/sources")).Execute(&path, arg); err != nil {
		panic(err)
	}
	arg.SubscriptionID = ""
	var (
		apiURL  = &url.URL{Path: path.String()}
		bodyArg interface{}
	)
	apiURL.Path = path.String()
	bodyArg = arg

	if err := c.apiClient.Do(ctx, "POST", apiURL, bodyArg, &res); err != nil {
		return nil, err
	}
	return &res, nil
}

// TODO
func (c *Client) Delete(
	ctx context.Context,
	arg *ngrok.EventSourceItem,
) error {
	var path bytes.Buffer
	if err := template.Must(template.New("delete_path").Parse("/event_subscriptions/{{ .SubscriptionID }}/sources/{{ .Type }}")).Execute(&path, arg); err != nil {
		panic(err)
	}
	arg.SubscriptionID = ""
	arg.Type = ""
	var (
		apiURL  = &url.URL{Path: path.String()}
		bodyArg interface{}
	)
	apiURL.Path = path.String()

	if err := c.apiClient.Do(ctx, "DELETE", apiURL, bodyArg, nil); err != nil {
		return err
	}
	return nil
}

// TODO
func (c *Client) Get(
	ctx context.Context,
	arg *ngrok.EventSourceItem,
) (*ngrok.EventSource, error) {
	var res ngrok.EventSource
	var path bytes.Buffer
	if err := template.Must(template.New("get_path").Parse("/event_subscriptions/{{ .SubscriptionID }}/sources/{{ .Type }}")).Execute(&path, arg); err != nil {
		panic(err)
	}
	arg.SubscriptionID = ""
	arg.Type = ""
	var (
		apiURL  = &url.URL{Path: path.String()}
		bodyArg interface{}
	)
	apiURL.Path = path.String()

	if err := c.apiClient.Do(ctx, "GET", apiURL, bodyArg, &res); err != nil {
		return nil, err
	}
	return &res, nil
}

// TODO
func (c *Client) List(
	ctx context.Context,
	subscriptionId string,

) (*ngrok.EventSourceList, error) {
	arg := &ngrok.EventSourcePage{SubscriptionID: subscriptionId}
	var res ngrok.EventSourceList
	var path bytes.Buffer
	if err := template.Must(template.New("list_path").Parse("/event_subscriptions/{{ .SubscriptionID }}/sources")).Execute(&path, arg); err != nil {
		panic(err)
	}
	arg.SubscriptionID = ""
	var (
		apiURL  = &url.URL{Path: path.String()}
		bodyArg interface{}
	)
	apiURL.Path = path.String()

	if err := c.apiClient.Do(ctx, "GET", apiURL, bodyArg, &res); err != nil {
		return nil, err
	}
	return &res, nil
}

// TODO
func (c *Client) Update(
	ctx context.Context,
	arg *ngrok.EventSourceUpdate,
) (*ngrok.EventSource, error) {
	var res ngrok.EventSource
	var path bytes.Buffer
	if err := template.Must(template.New("update_path").Parse("/event_subscriptions/{{ .SubscriptionID }}/sources/{{ .Type }}")).Execute(&path, arg); err != nil {
		panic(err)
	}
	arg.SubscriptionID = ""
	arg.Type = ""
	var (
		apiURL  = &url.URL{Path: path.String()}
		bodyArg interface{}
	)
	apiURL.Path = path.String()
	bodyArg = arg

	if err := c.apiClient.Do(ctx, "PATCH", apiURL, bodyArg, &res); err != nil {
		return nil, err
	}
	return &res, nil
}

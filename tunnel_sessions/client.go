// Code generated by apic. DO NOT EDIT.

package tunnel_sessions

import (
	"bytes"
	"context"
	"fmt"
	"net/url"
	"text/template"

	"github.com/ngrok/ngrok-api-go"
)

type Client struct {
	apiClient *ngrok.Client
}

func NewClient(apiClient *ngrok.Client) *Client {
	return &Client{apiClient: apiClient}
}

// List all online tunnel sessions running on this account.
func (c *Client) List(
	ctx context.Context,
	arg *ngrok.Page,
) (*ngrok.TunnelSessionList, error) {
	var res ngrok.TunnelSessionList
	var path bytes.Buffer
	if err := template.Must(template.New("list_path").Parse("/tunnel_sessions")).Execute(&path, arg); err != nil {
		panic(err)
	}
	var (
		apiURL  = &url.URL{Path: path.String()}
		bodyArg interface{}
	)
	apiURL.Path = path.String()
	queryVals := make(url.Values)
	if arg.BeforeID != nil {
		queryVals.Set("before_id", *arg.BeforeID)
	}
	if arg.Limit != nil {
		queryVals.Set("limit", *arg.Limit)
	}
	apiURL.RawQuery = queryVals.Encode()

	if err := c.apiClient.Do(ctx, "GET", apiURL, bodyArg, &res); err != nil {
		return nil, err
	}
	return &res, nil
}

func (c *Client) Iter(ctx context.Context) *Iter {
	return &Iter{
		client: c,
		ctx:    ctx,
		limit:  100,
		n:      -1,
	}
}

type Iter struct {
	client *Client
	ctx    context.Context
	n      int
	limit  int
	items  []ngrok.TunnelSession
	err    error
}

func (it *Iter) Next() bool {
	// no more if there is an error
	if it.err != nil {
		return false
	}

	// are there items remaining?
	if it.n < len(it.items)-1 {
		it.n += 1
		return true
	}

	// fetch the next page
	lastItemID := ""
	if it.n > 0 {
		lastItemID = it.items[it.n].ID
	}
	fmt.Println("lastItemID", lastItemID, "n", it.n)
	resp, err := it.client.List(it.ctx, &ngrok.Page{
		BeforeID: ngrok.String(lastItemID),
		Limit:    ngrok.String(fmt.Sprintf("%d", it.limit)),
	})
	if err != nil {
		it.err = err
		return false
	}
	it.n = 0
	it.items = resp.TunnelSessions
	fmt.Println(len(it.items), it.items)
	return len(it.items) > 0
}

func (it *Iter) Item() *ngrok.TunnelSession {
	return &it.items[it.n]
}

func (it *Iter) Err() error {
	return it.err
}

// Get the detailed status of a tunnel session by ID
func (c *Client) Get(
	ctx context.Context,
	id string,

) (*ngrok.TunnelSession, error) {
	arg := &ngrok.Item{ID: id}
	var res ngrok.TunnelSession
	var path bytes.Buffer
	if err := template.Must(template.New("get_path").Parse("/tunnel_sessions/{{ .ID }}")).Execute(&path, arg); err != nil {
		panic(err)
	}
	arg.ID = ""
	var (
		apiURL  = &url.URL{Path: path.String()}
		bodyArg interface{}
	)
	apiURL.Path = path.String()

	if err := c.apiClient.Do(ctx, "GET", apiURL, bodyArg, &res); err != nil {
		return nil, err
	}
	return &res, nil
}

// Issues a command instructing the ngrok agent to restart. The agent restarts
// itself by calling exec() on platforms that support it. This operation is notably
// not supported on Windows. When an agent restarts, it reconnects with a new
// tunnel session ID.
func (c *Client) Restart(
	ctx context.Context,
	id string,

) error {
	arg := &ngrok.Item{ID: id}
	var path bytes.Buffer
	if err := template.Must(template.New("restart_path").Parse("/tunnel_sessions/{{ .ID }}/restart")).Execute(&path, arg); err != nil {
		panic(err)
	}
	arg.ID = ""
	var (
		apiURL  = &url.URL{Path: path.String()}
		bodyArg interface{}
	)
	apiURL.Path = path.String()
	bodyArg = arg

	if err := c.apiClient.Do(ctx, "POST", apiURL, bodyArg, nil); err != nil {
		return err
	}
	return nil
}

// Issues a command instructing the ngrok agent that started this tunnel session to
// exit.
func (c *Client) Stop(
	ctx context.Context,
	id string,

) error {
	arg := &ngrok.Item{ID: id}
	var path bytes.Buffer
	if err := template.Must(template.New("stop_path").Parse("/tunnel_sessions/{{ .ID }}/stop")).Execute(&path, arg); err != nil {
		panic(err)
	}
	arg.ID = ""
	var (
		apiURL  = &url.URL{Path: path.String()}
		bodyArg interface{}
	)
	apiURL.Path = path.String()
	bodyArg = arg

	if err := c.apiClient.Do(ctx, "POST", apiURL, bodyArg, nil); err != nil {
		return err
	}
	return nil
}

// Issues a command instructing the ngrok agent to update itself to the latest
// version. After this call completes successfully, the ngrok agent will be in the
// update process. A caller should wait some amount of time to allow the update to
// complete (at least 10 seconds) before making a call to the Restart endpoint to
// request that the agent restart itself to start using the new code. This call
// will never update an ngrok agent to a new major version which could cause
// breaking compatibility issues. If you wish to update to a new major version,
// that must be done manually. Still, please be aware that updating your ngrok
// agent could break your integration. This call will fail in any of the following
// circumstances: there is no update available the ngrok agent's configuration
// disabled update checks the agent is currently in process of updating the agent
// has already successfully updated but has not yet been restarted
func (c *Client) Update(
	ctx context.Context,
	id string,

) error {
	arg := &ngrok.TunnelSessionsUpdate{ID: id}
	var path bytes.Buffer
	if err := template.Must(template.New("update_path").Parse("/tunnel_sessions/{{ .ID }}/update")).Execute(&path, arg); err != nil {
		panic(err)
	}
	arg.ID = ""
	var (
		apiURL  = &url.URL{Path: path.String()}
		bodyArg interface{}
	)
	apiURL.Path = path.String()
	bodyArg = arg

	if err := c.apiClient.Do(ctx, "POST", apiURL, bodyArg, nil); err != nil {
		return err
	}
	return nil
}
